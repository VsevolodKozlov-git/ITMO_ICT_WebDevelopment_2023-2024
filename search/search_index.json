{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#k33421","title":"\u041a\u043e\u0437\u043b\u043e\u0432 \u0412\u0441\u0435\u0432\u043e\u043b\u043e\u0434 \u0414\u0435\u043d\u0438\u0441\u043e\u0432\u0438\u0447, \u0433\u0440\u0443\u043f\u043f\u0430 K33421","text":""},{"location":"lab1/ex1/","title":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 1","text":""},{"location":"lab1/ex1/#_1","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/ex1/#_2","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>import socket\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    conn.connect(('127.0.0.1', 14901))\n    conn.send(b'Hello, server')\n    msg_from_server = conn.recv(14000).decode('utf-8')\n    print(msg_from_server)\n    conn.close()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"lab1/ex1/#_3","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>import socket\n\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    conn.bind(('127.0.0.1', 14901))\n    data, client_addr = conn.recvfrom(12000)\n    decoded_data = data.decode('utf-8')\n    print(decoded_data)\n    conn.sendto(b\"Hello, client\", client_addr)\n    conn.close()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"lab1/ex1/#_4","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0412\u044b\u0432\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430</p> <p></p> <p>\u0412\u044b\u0432\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430</p>"},{"location":"lab1/ex2/","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 2","text":""},{"location":"lab1/ex2/#_1","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/ex2/#_2","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>import socket\nimport pickle\n\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.connect(('127.0.0.1', 14900))\n\n    height = int(input('Height:'))\n    lower_base = int(input('Lower base:'))\n    upper_base = int(input('Upper base:'))\n\n    trap_data = (lower_base, upper_base, height)\n    encoded_trap_data = pickle.dumps(trap_data)\n    conn.send(encoded_trap_data)\n\n    server_response_enc = conn.recv(12000)\n    server_response_dec = server_response_enc.decode('utf-8')\n    print(f'Trapezoid area: {server_response_dec}')\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"lab1/ex2/#_3","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>\nimport socket\nimport pickle\n\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.bind(('127.0.0.1', 14900))\n    conn.listen(10)\n\n    client_socket, address = conn.accept()\n    encoded_data = client_socket.recv(12000)\n    lower_base, upper_base, height = pickle.loads(encoded_data)\n\n    area = (upper_base + lower_base) / 2 * height\n    area = round(area, 2)\n\n    area_encoded = str(area).encode('utf-8')\n    client_socket.send(area_encoded)\n    conn.close()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"lab1/ex2/#_4","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f","text":"<p> \u0427\u0442\u043e \u0432\u0438\u0434\u0438\u0442 \u043a\u043b\u0438\u0435\u043d\u0442</p>"},{"location":"lab1/ex3/","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 3","text":""},{"location":"lab1/ex3/#_1","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/ex3/#_2","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<pre><code>import socket\n\n\ndef get_webpage_response():\n    response_type = 'HTTP/1.0 200 OK\\n'\n    headers = 'Content-Type: text/html\\n\\n'\n    with open('index.html') as f:\n        content = \"\".join(f.readlines())\n\n    response_raw = response_type + headers + content\n    response_encoded = response_raw.encode('utf-8')\n    return response_encoded\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.bind(('127.0.0.1', 14900))\n    conn.listen(10)\n\n    while True:\n        try:\n            client_socket, address = conn.accept()\n            webpage_response = get_webpage_response()\n            client_socket.send(webpage_response)\n        except KeyboardInterrupt:\n            break\n    conn.close()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"lab1/ex3/#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;A Meaningful Page Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\nThe content of the document......\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab1/ex3/#_3","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f","text":"<p> \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430</p>"},{"location":"lab1/ex4/","title":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 4","text":""},{"location":"lab1/ex4/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":""},{"location":"lab1/ex4/#_2","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442 \u0438\u043c\u0435\u0435\u0442 2 \u043f\u043e\u0442\u043e\u043a\u0430. \u041e\u0434\u0438\u043d \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439</p> <pre><code>import socket\nimport concurrent.futures\nimport threading\n\nstop_event = threading.Event()\n\n\ndef input_thread(conn: socket.socket):\n    \"\"\"\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n    while not stop_event.is_set():\n        msg = input()\n        msg_encoded = msg.encode()\n        conn.send(msg_encoded)\n        if msg == 'Bye!':\n            print('Stopped everything')\n            stop_event.set()\n\n\ndef msg_printer_thread(conn: socket.socket):\n    \"\"\"\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n    while not stop_event.is_set():\n        msg = conn.recv(13000)\n        print(msg.decode('utf-8'))\n\n\ndef main():\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.connect(('127.0.0.1', 14900))\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        executor.submit(input_thread, conn)\n        executor.submit(msg_printer_thread, conn)\n    conn.close()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"lab1/ex4/#_3","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u0430","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0438\u043c\u0435\u0435\u0442 3 \u043f\u043e\u0442\u043e\u043a\u0430:</p> <ul> <li>\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439</li> <li>\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u0439\u043d\u0438 \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f(\u0438\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e)</li> <li>\u041f\u043e\u0442\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c</li> </ul> <p>2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u0430 \u043e\u0431\u0449\u0430\u044f\u044e\u0442\u0441\u044f \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 <code>msg_queue</code> </p> <pre><code>import socket\n\nfrom queue import Queue\nfrom concurrent import futures\nimport threading\nfrom dataclasses import dataclass\nfrom typing import Dict\n\n\n@dataclass(frozen=True)\nclass Client():\n    \"\"\"\n    \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0442\u043e\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c\n    \"\"\"\n    conn: socket.socket\n    stop_event: threading.Event\n    \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u043e\u0441\u0442\u043e\u043d\u043e\u0432\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430\"\"\"\n\n\nid_client_dict: Dict[int, Client] = {}\nmsg_queue = Queue()\n\n\ndef main_thread():\n    \"\"\"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435\"\"\"\n    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    conn.bind(('127.0.0.1', 14900))\n    conn.listen(10)\n    new_client_id = 0\n\n    with futures.ThreadPoolExecutor() as executor:\n        executor.submit(sender_thread)\n\n        while True:\n            client_conn, address = conn.accept()\n            client_conn.send(f'Server: you have received id {new_client_id}'.encode('utf-8'))\n            client = Client(client_conn, threading.Event())\n            id_client_dict[new_client_id] = client\n            executor.submit(client_thread, client, new_client_id)\n            new_client_id += 1\n\n\ndef client_thread(client: Client, _id):\n    \"\"\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442\u043a\u043b\u0438\u0435\u043d\u0442\u0430\"\"\"\n    while not client.stop_event.is_set():\n        client_msg = client.conn.recv(15000).decode('utf-8')\n        msg_queue.put((client_msg, _id))\n\n\ndef sender_thread():\n    \"\"\"\u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\"\"\"\n    while True:\n        msg, sender_id = msg_queue.get()\n\n        for _id, client in id_client_dict.items():\n            if sender_id != _id:\n                client.conn.send(f'{sender_id}:{msg}'.encode())\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0447\u0430\u0442\u0430\n        if msg == 'Bye!':\n            sender_client = id_client_dict[sender_id]\n            sender_client.stop_event.set()\n            del id_client_dict[sender_id]\n\n\nif __name__ == '__main__':\n    main_thread()\n</code></pre>"},{"location":"lab1/ex4/#_4","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u044f \u0441\u043e\u0437\u0434\u0430\u043c 4 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0447\u0430\u0442\u0435</p> <p></p> <p>\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 id=0</p> <p></p> <p>\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 id=1</p> <p></p> <p>\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 id=2</p>"},{"location":"lab1/ex5/","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 5","text":""},{"location":"lab1/ex5/#_1","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/ex5/#_2","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>import socket\nimport logging\nfrom io import BufferedWriter, BufferedReader\nimport email.parser\nimport email.message\nfrom urllib.parse import  parse_qs, urlparse\nfrom dataclasses import dataclass\nfrom typing import List, Tuple\n\n\n\nclass Request:\n    \"\"\"\n    Class containing request data\n    \"\"\"\n    def __init__(self, method, target, version, headers, rfile):\n        self.method = method\n        self.target = target\n        self.version = version\n        self.headers = headers\n        self.rfile = rfile\n\n    @property\n    def url_path(self):\n        return self.url.path\n\n    @property\n    def url_params(self):\n        return parse_qs(self.url.query)\n\n    @property\n    def url(self):\n        return urlparse(self.target)\n\n\nclass ConnWriter:\n    \"\"\"\n    Wrapper around file interface of socket\n    \"\"\"\n    encoding = 'iso-8859-1'\n\n    def __init__(self, wfile: BufferedWriter):\n        self._wfile = wfile\n\n    def encode_and_write(self, s: str):\n        if not s.endswith('\\r\\n'):\n            s += '\\r\\n'\n        encoded = s.encode(self.encoding)\n        self._wfile.write(encoded)\n\n    def write_empty_line(self):\n        self._wfile.write(b'\\r\\n')\n\n    def write_bytes(self, s: bytes):\n        if not s.endswith(b'\\r\\n'):\n            s += b'\\r\\n'\n        self._wfile.write(s)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self._wfile.flush()\n        self._wfile.close()\n\n\n@dataclass(frozen=True)\nclass Response:\n    \"\"\"\n    Dataclass from which response created\n    \"\"\"\n    status: int\n    reason: str\n    headers: List[Tuple] = None\n    body: bytes = None\n\n\n@dataclass(frozen=True)\nclass Mark:\n    \"\"\"\n    Dataclass to imitate row in database\n    \"\"\"\n    subject: str\n    mark: int\n\n\nclass MyHTTPServer:\n    \"\"\"\n    Accept requests, generate responses\n    \"\"\"\n    def __init__(self, host, port, server_name):\n        self._host = host\n        self._port = port\n        self._server_name = server_name\n        self.marks: List[Mark] = [Mark('Math', 5), Mark('Programming', 4)]\n        \"\"\"Dict to imitate database. Already packed with some values\"\"\"\n\n\n    def serve_forever(self):\n        \"\"\"\n        Starts server. Main function of a class\n        \"\"\"\n\n        conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        try:\n            conn.bind((self._host, self._port))\n            conn.listen(10)\n            while True:\n                client_conn, client_address = conn.accept()\n                self.serve_client(client_conn)\n        finally:\n            conn.close()\n\n    def serve_client(self, client_conn):\n        \"\"\"\n        Get response from a client and send appropriate response\n        \"\"\"\n        request = self.parse_request(client_conn)\n        response = self.handle_request(request)\n        self.send_response(client_conn, response)\n\n    def parse_request(self, conn):\n        \"\"\"\n        Convert request into Request instance\n        \"\"\"\n        rfile = conn.makefile('rb')\n        method, target, version = self.parse_request_line(rfile)\n        logging.debug(f'request_line: {method} {target} {version}')\n        headers = self.parse_headers(rfile)\n        logging.debug(f'headers:\\n{headers}')\n        self.check_host(headers)\n\n        return Request(method, target, version, headers, rfile)\n\n    def parse_request_line(self, rfile):\n        request_line = rfile.readline().decode('iso-8859-1')\n        request_line = request_line.rstrip('\\r\\n')\n        method, target, version = request_line.split()\n        if version != 'HTTP/1.1':\n            raise Exception('Invalid HTTP version')\n        return method, target, version\n\n    def parse_headers(self, rfile: BufferedReader) -&gt; email.message.Message:\n        headers_list = []\n        while True:\n            line = rfile.readline()\n\n            if line in (b'\\r\\n', b'\\n', b''):\n                break\n            headers_list.append(line)\n        headers_str = b''.join(headers_list).decode('iso-8859-1')\n        return email.parser.Parser().parsestr(headers_str)\n\n    def check_host(self, headers):\n        \"\"\"Is host correct?\"\"\"\n        host = headers.get('Host', '')\n        logging.debug(f'host: {host}')\n        if not host:\n            raise Exception('Request without host')\n        if host not in (self._server_name,\n                        f'{self._host}:{self._port}'):\n            raise Exception('Invalid host')\n\n    def handle_request(self, request:Request) -&gt; Response:\n        \"\"\"Handle different types of request. Even if this request is not supported\"\"\"\n        if request.method == 'GET' and request.url_path == '/':\n            return self.handle_get_mark(request)\n        if request.method == 'POST' and request.url_path =='/update_marks':\n            return self.handle_post_update_marks(request)\n        if request.method == 'GET' and request.url_path == \"/update_marks\":\n            return self.handle_get_update_marks(request)\n        if request.method == 'GET' and request.url_path == '/favicon.ico':\n            return Response(200, 'OK')\n\n        return self.handle_404(request)\n\n    def handle_post_update_marks(self, request: Request):\n        arg_line = request.rfile.readline()\n        arg_line = arg_line.decode('iso-8859-1')\n        parameters = parse_qs(arg_line)\n        if 'mark' not in parameters:\n            raise Exception('No mark in post')\n        if 'subject' not in parameters:\n            raise Exception('No subject in post')\n        mark = parameters['mark'][0]\n        if not mark.isnumeric():\n            raise Exception('Invalid mark')\n        mark = int(mark)\n        subject = parameters['subject'][0]\n        self.marks.append(Mark(subject, mark))\n        return Response(204, 'Created')\n\n    def handle_get_mark(self, request: Request):\n        content_type = 'text/html; charset=utf-8'\n        body = '&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;'\n        body += '&lt;table&gt;'\n        for mark in self.marks:\n            body += '&lt;tr&gt;'\n            body += f'&lt;td&gt;{mark.subject}&lt;/td&gt;'\n            body += f'&lt;td&gt;{mark.mark}&lt;/td&gt;'\n            body += '&lt;/tr&gt;'\n        body += '&lt;/table&gt;'\n        body += '&lt;/body&gt;&lt;/html&gt;'\n\n        body = body.encode('utf-8')\n        headers = [('Content-Type', content_type),\n                   ('Content-Length', len(body))]\n        return Response(404, 'Not Found', headers, body)\n\n    def handle_404(self, request: Request):\n        body = '&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;404 not found&lt;/h1&gt;&lt;/body&gt;'\n        body = body.encode('utf-8')\n        content_type = 'text/html; charset=utf-8'\n        headers = [('Content-Type', content_type),\n                   ('Content-Length', len(body))]\n        return Response(200, 'OK', headers, body)\n\n\n    def handle_get_update_marks(self, request):\n        with open('update_marks.html') as f:\n            body = ''.join(f.readlines())\n        body = body.encode('utf-8')\n\n        headers = [('Content-Type', 'text/html; charset=utf-8'),\n                   ('Content-Length', len(body))]\n        return Response(200, 'OK', headers, body)\n\n\n    def send_response(self, conn: socket.socket, resp: Response):\n        \"\"\"Convert Response class instance into appropriate test and sends it via socket\"\"\"\n        with ConnWriter(conn.makefile('wb')) as wfile_wrapped:\n            status_line = f'HTTP/1.1  {resp.status} {resp.reason}'\n            wfile_wrapped.encode_and_write(status_line)\n\n            if resp.headers is not None:\n                for key, value in resp.headers:\n                    header_line = f'{key}: {value}'\n                    wfile_wrapped.encode_and_write(header_line)\n            wfile_wrapped.write_empty_line()\n\n            if resp.body is not None:\n                wfile_wrapped.write_bytes(resp.body)\n\n\nif __name__ == '__main__':\n    format = \"%(asctime)s: %(message)s\"\n    logging.basicConfig(format=format, level=logging.INFO,\n                        datefmt=\"%H:%M:%S\")\n    host = '127.0.0.1'\n    port = 14900\n    name = 'example.local'\n    server = MyHTTPServer(host, port, name)\n    server.serve_forever()\n</code></pre>"},{"location":"lab1/ex5/#update_markshtml","title":"\u041a\u043e\u0434 update_marks.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en-GB\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Update marks&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;form action=\"/update_marks\" method=\"post\"&gt;\n    &lt;label&gt;\n        Input mark\n        &lt;input type=\"number\" size=\"3\" id=\"mark\" name=\"mark\"&gt;\n    &lt;/label&gt;\n    &lt;br&gt;\n    &lt;label&gt;\n        Input subject\n        &lt;input type=\"text\" size=\"20\" id=\"subject\" name=\"subject\"&gt;\n    &lt;/label&gt;\n    &lt;div&gt;\n        &lt;input type=\"reset\" value=\"Clear\"&gt;\n        &lt;input type=\"submit\" value=\"Send\"&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab1/ex5/#_3","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445</p> <p></p> <p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a</p> <p></p> <p>\u041a\u043e\u0440\u043d\u0435\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438</p> <p></p> <p>\u041f\u0440\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c not found</p>"},{"location":"lab2/forms/","title":"Forms","text":""},{"location":"lab2/forms/#userregisterform","title":"UserRegisterForm","text":"<p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: * \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044f \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 * \u0418\u0437\u043c\u0435\u043d\u0435\u043d \u0432\u0438\u0434\u0436\u0435\u0442 \u0434\u043b\u044f \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f</p> <pre><code>class UserRegisterForm(UserCreationForm):\n    def __init__(self, *args, **kwargs):\n        super(UserRegisterForm, self).__init__(*args, **kwargs)\n        self.fields['first_name'].required = True\n        self.fields['last_name'].required = True\n        self.fields['passport_number'].required = True\n        self.fields['birth_date'].widget = widgets.DateInput(attrs={'type':'date',\n                                                                    'class': 'form-control'})\n\n    class Meta(UserCreationForm.Meta):\n        model = user\n        fields = ['username',\n                  'first_name',\n                  'last_name',\n                  'email',\n                  'passport_number',\n                  'birth_date',\n                  'password1',\n                  'password2']\n\n</code></pre>"},{"location":"lab2/forms/#reviewform","title":"ReviewForm","text":"<p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430</p> <pre><code>class ReviewForm(ModelForm):\n    def __init__(self, user_instance, *args, **kwargs):\n        super(ReviewForm, self).__init__(*args, **kwargs)\n        self.update_field_userflights_for_user(user_instance)\n\n    class Meta:\n        model = models.Review\n        fields = ['user_flight', 'text', 'grade']\n\n\n    def update_field_userflights_for_user(self, user_instance):\n        # default value\n        empty_label = ''\n\n        # filter only user's userflights\n        userflights_set = user_instance.userflight_set.get_queryset()\n        userflights_set = userflights_set.filter(approved=True)\n        if not userflights_set:\n            empty_label = '\u0423 \u0432\u0430\u0441 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430'\n        # remove already reviewed flights\n        else:\n            revieved_userflights_pk = [i.user_flight.pk for i in models.Review.objects.all()]\n            userflights_set = userflights_set.exclude(pk__in=revieved_userflights_pk)\n            if not userflights_set:\n                empty_label = '\u0412\u044b \u043e\u0446\u0435\u043d\u0438\u043b\u0438 \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u043b\u0435\u0442\u044b'\n\n        self.fields['user_flight'] = forms.ModelChoiceField(\n            queryset=userflights_set,\n            empty_label=empty_label)\n</code></pre>"},{"location":"lab2/forms/#reservationform","title":"ReservationForm","text":"<p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u0435\u0442\u0430</p> <pre><code>class ReservationForm(ModelForm):\n    def __init__(self, user_instance, flight_instance, *args, **kwargs):\n        super(ModelForm, self).__init__(*args, **kwargs)\n        user_field = self.fields['user']\n        user_field.initial = user_instance\n        user_field.widget = user_field.hidden_widget()\n\n        flight_field = self.fields['flight']\n        flight_field.initial = flight_instance\n        flight_field.widget = flight_field.hidden_widget()\n\n\n    class Meta:\n        model = models.UserFlight\n        fields = ['seat_number',\n                  'user',\n                  'flight']\n</code></pre>"},{"location":"lab2/models/","title":"Models","text":""},{"location":"lab2/models/#models","title":"Models","text":""},{"location":"lab2/models/#flight","title":"Flight","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0430\u044f \u0437\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u0435\u0442\u0435 \u0412 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 clean \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0434\u0430\u0442\u0430 \u0432\u044b\u043b\u0435\u0442\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f</p> <pre><code>class Flight(models.Model):\n    flight_number = models.CharField(max_length=10, blank=False)\n    airline = models.CharField(max_length=100, blank=False)\n    departure_place = models.CharField(max_length=100, blank=False)\n    arrival_place = models.CharField(max_length=100, blank=False)\n    departure_time = models.DateTimeField()\n    arrival_time = models.DateTimeField()\n    gate = models.IntegerField(null=True)\n\n    def clean(self):\n        required = [(self.flight_number, 'flight number'),\n                    (self.airline, 'airline'),\n                    (self.departure_place, 'departure place'),\n                    (self.arrival_place,  'arrival place')]\n\n        for field, name in required:\n            if not field:\n                raise ValidationError(f'{name} is empty')\n\n        if self.departure_time &gt;= self.arrival_time:\n            raise ValidationError(f'departure time larger than arrival time')\n\n    def __str__(self):\n        return self.flight_number\n</code></pre>"},{"location":"lab2/models/#user","title":"User","text":"<p>\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0438 \u043f\u043e\u043b\u0435\u0442\u044b</p> <pre><code>class User(AbstractUser):\n    birth_date = models.DateField(null=True, blank=True)\n    passport_number = models.CharField(max_length=10, null=True, unique=True, blank=True)\n    flights = models.ManyToManyField(Flight, through='UserFlight')\n\n    def __str__(self):\n        return f'{self.get_username()}'\n\n    def get_absolute_url(self):\n        return reverse('aviasales:user_detail', kwargs={'pk': self.pk})\n</code></pre>"},{"location":"lab2/models/#userflight","title":"UserFlight","text":"<p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u0435\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> <pre><code>class UserFlight(models.Model):\n    seat_number = models.CharField(max_length=4, blank=False)\n    ticket_number = models.CharField(max_length=10, blank=False)\n    approved = models.BooleanField(default=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    flight = models.ForeignKey(Flight, on_delete=models.CASCADE)\n\n    def clean(self):\n        required = [(self.seat_number, 'seat number')]\n        for field, name in required:\n            if not field:\n                raise ValidationError(f'{name} is empty')\n\n    def __str__(self):\n        return f'{self.user.get_username()} {self.flight.flight_number}'\n\n    def get_delete_url(self):\n        return reverse('aviasales:userflight_delete', kwargs={'pk': self.pk})\n\n    def get_update_url(self):\n        return reverse('aviasales:userflight_update', kwargs={'pk': self.pk})\n</code></pre>"},{"location":"lab2/models/#review","title":"Review","text":"<p>\u041e\u0442\u0437\u044b\u0432 \u043d\u0430 \u043f\u043e\u043b\u0435\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> <pre><code>class Review(models.Model):\n    user_flight = models.ForeignKey(UserFlight, on_delete=models.CASCADE)\n    text = models.TextField(blank=True)\n    grade = models.IntegerField(validators=[validators.MinValueValidator(0, message='less than 0'),\n                                            validators.MaxValueValidator(10, message='larger than 10')])\n\n    def __str__(self):\n        return f'{self.user_flight}'\n</code></pre>"},{"location":"lab2/urls/","title":"Urls","text":"<pre><code>urlpatterns = [\n    path('user_registration', views.UserRegistration.as_view(), name='user_registration'),\n    path('user_detail/&lt;int:pk&gt;', views.UserDetail.as_view(), name='user_detail'),\n    path('flight_info/&lt;int:flight_pk&gt;', views.FlightInfo.as_view(), name='flight_info'),\n    path('auth_test', views.auth_test, name='auth_test'),\n    path('my_flights', views.MyFlights.as_view(), name='my_flights'),\n    path('userflight_update/&lt;int:pk&gt;', views.UserFlightUpdateView.as_view(), name='userflight_update'),\n    path('userflight_delete/&lt;int:pk&gt;', views.UserFlightDeleteView.as_view(), name='userflight_delete'),\n    path('review_create', views.ReviewCreateView.as_view(), name='review_create'),\n    path('review_list', views.ReviewListView.as_view(), name='review_list'),\n    path('userflight_reservation_list', views.UserFlightsReservationList.as_view(), name='userflight_reservation_list'),\n    path(r'userflight_reservation_form/&lt;int:flight_pk&gt;', views.UserFlightsReservationForm.as_view(), name='userflight_reservation_form')\n]\n</code></pre>"},{"location":"lab2/views/","title":"Views","text":""},{"location":"lab2/views/#userregistration","title":"UserRegistration","text":"<p>url: <code>/aviasales/user_registration</code></p> <p>\u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> <p></p> <pre><code>class UserRegistration(View):\n    template_path = get_template_path('user_registration')\n    form_class = forms.UserRegisterForm\n\n    def get(self, request, *args, **kwargs):\n        form = self.form_class()\n        context = {'form': form}\n        return render(request, self.template_path, context)\n\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            user = form.save()\n            return redirect(user.get_absolute_url())\n        context = {'form': form}\n        return render(request, self.template_path, context)\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;User registration&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form method=\"post\"&gt;\n        {%  csrf_token %}\n        {{ form.as_p }}\n        &lt;input type=\"submit\" value=\"submit\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#userdetail","title":"UserDetail","text":"<p>url: <code>aviasales/user_detail/&lt;int:pk&gt;</code></p> <p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435</p> <p></p> <pre><code>class UserDetail(DetailView):\n    model = user_model\n    template_name = 'aviasales/user_detail.html'\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{{ object.username }} profile&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ object.username }}&lt;/h1&gt;\n    &lt;ul&gt;\n        &lt;li&gt;\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0438\u043c\u044f: {{ object.first_name }} {{ object.last_name }}&lt;/li&gt;\n        {% if object.email %}\n            &lt;li&gt;Email: {{ object.email }}&lt;/li&gt;\n        {% endif %}\n        {% if object.birth_date %}\n            &lt;li&gt;\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f: {{ object.birth_date }}&lt;/li&gt;\n        {% endif %}\n        {% if object.passport_number is not None%}\n            &lt;li&gt;\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430: {{ object.passport_number }}&lt;/li&gt;\n        {% endif %}\n    &lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#flightinfo","title":"FlightInfo","text":"<p>url: <code>aviasales/flight_info/&lt;int:flight_pk&gt;</code></p> <p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u043f\u043e\u043b\u0435\u0442\u0430</p> <p></p> <pre><code>class FlightInfo(View):\n    template_path = get_template_path('flight_info')\n\n    def get(self, request, flight_pk):\n        user_flights = models.UserFlight.objects.filter(flight__pk=flight_pk,\n                                                        approved=True)\n        context = {'user_flights': user_flights}\n        return render(request, self.template_path, context=context)\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Flight info&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    {% if not user_flights %}\n        &lt;h2&gt;No approved tickets for that flight&lt;/h2&gt;\n    {% else %}\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Ticket number&lt;/th&gt;\n                &lt;th&gt;Seat&lt;/th&gt;\n                &lt;th&gt;Passenger profile&lt;/th&gt;\n            &lt;/tr&gt;\n\n\n            {% for user_flight in user_flights %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ user_flight.ticket_number }}&lt;/td&gt;\n                    &lt;td&gt;{{ user_flight.seat_number }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;a href=\"{{ user_flight.user.get_absolute_url }}\"&gt;\n                            click\n                        &lt;/a&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/table&gt;\n    {% endif %}\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#userflightsreservationlist","title":"UserFlightsReservationList","text":"<p>url: <code>aviasales/userflight_reservation_list</code></p> <p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0442\u043e\u0432</p> <p></p> <pre><code>class UserFlightsReservationList(LoginRequiredMixin, ListView):\n    model = models.Flight\n    template_name = get_template_path('userflight_reservation_list')\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        user = self.request.user\n        reserved_flights_pks = {i.flight.pk for i in user.userflight_set.get_queryset()}\n        queryset = queryset.exclude(pk__in=reserved_flights_pks)\n        return queryset\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Flight reservation&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% if not object_list %}\n         &lt;p&gt;No flights you can reserve&lt;/p&gt;\n    {% else %}\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;flight number&lt;/th&gt;\n                &lt;th&gt;airline&lt;/th&gt;\n                &lt;th&gt;departure place&lt;/th&gt;\n                &lt;th&gt;arrival_place&lt;/th&gt;\n                &lt;th&gt;departure_time&lt;/th&gt;\n                &lt;th&gt;arrival_tim&lt;/th&gt;\n                &lt;th&gt;gate&lt;/th&gt;\n                &lt;th&gt;reserve&lt;/th&gt;\n            &lt;/tr&gt;\n            {% for obj in object_list %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ obj.flight_number }}&lt;/td&gt;\n                    &lt;td&gt;{{ obj.airline }}&lt;/td&gt;\n                    &lt;td&gt;{{ obj.departure_place }}&lt;/td&gt;\n                    &lt;td&gt;{{ obj.arrival_place }}&lt;/td&gt;\n                    &lt;td&gt;{{ obj.departure_time }}&lt;/td&gt;\n                    &lt;td&gt;{{ obj.arrival_time }}&lt;/td&gt;\n                    &lt;td&gt;{{ obj.gate }}&lt;/td&gt;\n                    &lt;td&gt;&lt;a href=\"{% url 'aviasales:userflight_reservation_form' flight_pk=obj.pk %}\"&gt;reserve&lt;/a&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/table&gt;\n    {% endif %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#userflightsreservationform","title":"UserFlightsReservationForm","text":"<p>url: <code>aviasales/userflight_reservation_form/&lt;int:flight_pk&gt;</code></p> <p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0442\u0430</p> <p></p> <pre><code>class UserFlightsReservationForm(LoginRequiredMixin, View):\n    template_path = get_template_path('userflight_reservation_form')\n    form_class = forms.ReservationForm\n\n    last_get_flight = None\n\n    def get(self, request, flight_pk, *args, **kwargs):\n        user = request.user\n        flight = models.Flight.objects.get(pk=flight_pk)\n        self.last_get_flight = flight\n        form = self.form_class(user, flight)\n        context = {'form': form}\n        return render(request, self.template_path, context)\n\n    def post(self, request, flight_pk, *args, **kwargs):\n        user = request.user\n        flight = models.Flight.objects.get(pk=flight_pk)\n        form = self.form_class(user, flight, request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect(reverse('aviasales:userflight_reservation_list'))\n        context = {'form': form}\n        return render(request, self.template_path, context)\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Reservation form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n     &lt;form method=\"POST\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;input type=\"submit\" value=\"Send\"&gt;\n     &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#myflights","title":"MyFlights","text":"<p>url: <code>/aviasales/my_flights</code></p> <p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c, \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u0435\u0442\u044b</p> <p></p> <pre><code>class MyFlights(LoginRequiredMixin, View):\n\n    template_path = get_template_path('my_flights')\n\n    def get(self, request):\n        user = request.user\n        user_flights = models.UserFlight.objects.filter(user__pk=user.pk, approved=True)\n        context = {'user_flights': user_flights}\n        return render(request, self.template_path, context)\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;My Flights&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    {% if not user_flights %}\n        You have no flights\n    {% else %}\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Flight number&lt;/th&gt;\n                &lt;th&gt;Ticker number&lt;/th&gt;\n                &lt;th&gt;Seat number&lt;/th&gt;\n                &lt;th&gt;Change&lt;/th&gt;\n                &lt;th&gt;Delete&lt;/th&gt;\n            &lt;/tr&gt;\n\n            {% for user_flight in user_flights %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ user_flight.flight.flight_number }}&lt;/td&gt;\n                    &lt;td&gt;{{ user_flight.ticket_number }}&lt;/td&gt;\n                    &lt;td&gt;{{ user_flight.seat_number }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;a href=\"{{ user_flight.get_update_url }}\"&gt;\n                            Update\n                        &lt;/a&gt;\n                    &lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;a href=\"{{ user_flight.get_delete_url }}\"&gt;\n                            Delete\n                        &lt;/a&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/table&gt;\n\n    {% endif %}\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#userflightupdateview","title":"UserFlightUpdateView","text":"<p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0442\u0430</p> <p>url: <code>aviasales/userflight_update/&lt;int:pk&gt;</code></p> <pre><code>class UserFlightUpdateView(UserPassesTestMixin, UpdateView):\n    model = models.UserFlight\n    fields = ['seat_number']\n    success_url = reverse_lazy('aviasales:my_flights')\n    def test_func(self):\n        userflight_url_pk = self.kwargs[self.pk_url_kwarg]\n        user = self.request.user\n        try:\n            user.userflight_set.get(pk=userflight_url_pk, approved=True)\n            return True\n        except models.UserFlight.DoesNotExist:\n            return False\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;User Flight Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form method=\"POST\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;input type=\"submit\" value=\"Send\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#userflightdeleteview","title":"UserFlightDeleteView","text":"<p>url: <code>aviasales/userflight_delete/&lt;int:pk&gt;</code></p> <p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0438 \u043d\u0430 \u043f\u043e\u043b\u0435\u0442</p> <p></p> <pre><code>class UserFlightDeleteView(UserPassesTestMixin, DeleteView):\n    model = models.UserFlight\n    success_url = reverse_lazy('aviasales:my_flights')\n\n    def test_func(self):\n        userflight_url_pk = self.kwargs[self.pk_url_kwarg]\n        user = self.request.user\n        try:\n            user.userflight_set.get(pk=userflight_url_pk, approved=True)\n            return True\n        except models.UserFlight.DoesNotExist:\n            return False\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Confirm user flight delete&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h2&gt;Delete?&lt;/h2&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        &lt;input type=\"submit\" value=\"Yes\"&gt;\n    &lt;/form&gt;\n\n    &lt;a href=\"{% url 'aviasales:my_flights' %}\"&gt;Return to my flights page&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#reviewcreateview","title":"ReviewCreateView","text":"<p>url: <code>aviasales/review_create</code></p> <p>\u0424\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430 \u043d\u0430 \u043f\u043e\u043b\u0435\u0442</p> <p></p> <pre><code>class ReviewCreateView(LoginRequiredMixin, View):\n    template_path = get_template_path('review_form')\n    form_class = forms.ReviewForm\n\n    def get(self, request, *args, **kwargs):\n        user = request.user\n        form = self.form_class(user)\n        context = {'form': form}\n        return render(request, self.template_path, context)\n\n    def post(self, request, *args, **kwargs):\n        user = request.user\n        form = self.form_class(user, request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect(reverse('aviasales:review_create'))\n        context = {'form': form}\n        return render(request, self.template_path, context)\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Add review&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;input type=\"submit\" value=\"Add\"&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab2/views/#reviewlistview","title":"ReviewListView","text":"<p>url: <code>aviasales/review_list</code></p> <p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438</p> <p></p> <pre><code>class ReviewListView(ListView):\n    model = models.Review\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Review list&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        {% for obj in object_list %}\n            &lt;h2&gt;&lt;a href=\"{{ obj.user_flight.user.get_absolute_url }}\"&gt;\n                {{  obj.user_flight.user.get_username }}\n            &lt;/a&gt;&lt;/h2&gt;\n            &lt;p&gt;Flight number: {{ obj.user_flight.flight.flight_number }}&lt;/p&gt;\n            &lt;p&gt;Grade:{{ obj.grade }}&lt;/p&gt;\n            &lt;p&gt;Review:{{ obj.text }}&lt;/p&gt;\n        {% empty %}\n            &lt;p&gt;no reviews&lt;/p&gt;\n        {% endfor %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab3/error/","title":"\u041e\u0448\u0438\u0431\u043a\u0430 django ORM","text":"<pre><code>book_cnt = models.Book.objects.annotate(\n        instances_cnt=dj_models.Count('instances')\n    )\nrare_books = book_cnt.filter(instances_cnt__lte=2)\nrare_books_instances = rare_books.values_list('instances', flat=True)\n</code></pre> <p>\u041f\u0440\u043e\u0441\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0445\u043e\u0440\u043e\u0448\u043e</p> <pre><code>book_cnt = models.Book.objects.annotate(\n        instances_cnt=dj_models.Count('instances')\n    )\nrare_books = book_cnt.filter(instances_cnt__lte=2)\nbooks_id = set(rare_books.values_list('id', flat=True))\nprint(books_id)\n</code></pre> <p>Prefetch \u043d\u0435 \u043f\u043e\u043c\u043e\u0433</p> <pre><code>rare_books = book_cnt.prefetch_related('instances').filter(instances_cnt__lte=2)\nprint(rare_books.values_list('instances', flat=True))\n</code></pre> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u0435\u0437 annotate values_list \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u043d\u043e</p> <pre><code>inst = models.Book.objects.filter(year__gte=2020).values_list('instances')\nprint(len(inst))\n</code></pre>"},{"location":"lab3/filters/","title":"Filters","text":"<pre><code>import django_filters as filters\nfrom lab3 import models \n\n\nclass ReaderRegistrationDateRangeFilter(filters.FilterSet):\n\n    date = filters.DateFromToRangeFilter(field_name='registration_date')\n\n    class Meta:\n        model = models.Reader\n        fields = ['date']\n\n\nclass BookTakenDateRangeFilter(filters.FilterSet):\n    date = filters.DateFromToRangeFilter(field_name='start_date')\n\n    class Meta:\n        model = models.ReaderBookHistory\n        fields = ['date']\n\n\nclass RoomRegistrationDateRangeFilter(filters.FilterSet):\n    date = filters.DateFromToRangeFilter(field_name='start_date')\n\n    class Meta:\n        model = models.ReaderRoomHistory\n        fields = ['date']\n</code></pre>"},{"location":"lab3/models/","title":"models","text":"<pre><code>from django.db import models\nfrom django.contrib.auth.models import  AbstractUser\n\nclass UserModel(AbstractUser):\n    REQUIRED_FIELDS = ['first_name', 'last_name', 'email']\n\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return str(self.name)\n\n\nclass Section(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return str(self.name)\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    section = models.ForeignKey('Section',\n                                related_name='books',\n                                on_delete=models.RESTRICT)\n    publisher = models.ForeignKey('Publisher',\n                                  related_name='books',\n                                  on_delete=models.RESTRICT)\n    year = models.IntegerField()\n    authors = models.ManyToManyField('Author',\n                                     related_name='books',\n                                     through='BookAuthors')\n    rooms = models.ManyToManyField('Room',\n                                   related_name='books',\n                                   through='BookInstance')\n\n    def __str__(self):\n        return f'{self.title}'\n\n\nclass Author(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return f'{self.first_name} {self.last_name}'\n\n\nclass BookAuthors(models.Model):\n    author = models.ForeignKey('Author', on_delete=models.RESTRICT)\n    book = models.ForeignKey('Book',  on_delete=models.RESTRICT)\n\n\nclass BookInstance(models.Model):\n    quality_types = (\n        ('b', 'bad'),\n        ('g', 'good'),\n        ('n', 'new')\n    )\n    code = models.CharField(max_length=10, unique=True)\n    book = models.ForeignKey('Book',\n                             related_name='instances',\n                             on_delete=models.RESTRICT)\n    room = models.ForeignKey('Room',\n                             related_name='book_instances',\n                             on_delete=models.RESTRICT)\n    quality = models.CharField(max_length=1, choices=quality_types)\n\n    def __str__(self):\n        return f'b:{self.book} r:{self.room} q:{self.quality}'\n\n\nclass Room(models.Model):\n    name = models.CharField(max_length=100)\n    capacity = models.IntegerField()\n\n    def __str__(self):\n        return str(self.name)\n\n\nclass Reader(models.Model):\n    education_types = (('b', 'beginner'),\n                       ('m', 'middle'),\n                       ('h', 'higher'),\n                       ('d', 'degree'))\n\n    reader_number= models.CharField(max_length=10)\n    registration_date=models.DateField()\n    active = models.BooleanField(default=True)\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    passport_number = models.CharField(max_length=10)\n    birth_date = models.DateField()\n    address = models.CharField(max_length=200)\n    mobile_number = models.CharField(max_length=12)\n    education = models.CharField(max_length=1, choices=education_types)\n    book_instances = models.ManyToManyField('BookInstance',\n                                            related_name='readers',\n                                            through='ReaderBookHistory')\n    rooms = models.ManyToManyField('Room',\n                                   related_name='readers',\n                                   through='ReaderRoomHistory')\n    def __str__(self):\n        return f'{self.first_name} {self.last_name}'\n\n\nclass ReaderBookHistory(models.Model):\n    book_instance = models.ForeignKey('BookInstance',\n                                      related_name='readers_history',\n                                      on_delete=models.CASCADE)\n    reader = models.ForeignKey('Reader',\n                               related_name='books_history',\n                               on_delete=models.RESTRICT)\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n\n\nclass ReaderRoomHistory(models.Model):\n    reader = models.ForeignKey('Reader',\n                               related_name='rooms_history',\n                               on_delete=models.RESTRICT)\n    room = models.ForeignKey('Room',\n                             related_name='readers_history',\n                             on_delete=models.RESTRICT)\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n\nfrom django.db import models\n\nfrom django.contrib.auth.models import  AbstractUser\n\nclass UserModel(AbstractUser):\n    REQUIRED_FIELDS = ['first_name', 'last_name', 'email']\n\n\n\nclass TestModel(models.Model):\n    title = models.CharField(max_length=100)\n\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return str(self.name)\n\n\nclass Section(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return str(self.name)\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    section = models.ForeignKey('Section',\n                                related_name='books',\n                                on_delete=models.RESTRICT)\n    publisher = models.ForeignKey('Publisher',\n                                  related_name='books',\n                                  on_delete=models.RESTRICT)\n    year = models.IntegerField()\n    authors = models.ManyToManyField('Author',\n                                     related_name='books',\n                                     through='BookAuthors')\n    rooms = models.ManyToManyField('Room',\n                                   related_name='books',\n                                   through='BookInstance')\n\n    def __str__(self):\n        return f'{self.title}'\n\n\nclass Author(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return f'{self.first_name} {self.last_name}'\n\n\nclass BookAuthors(models.Model):\n    author = models.ForeignKey('Author', on_delete=models.RESTRICT)\n    book = models.ForeignKey('Book',  on_delete=models.RESTRICT)\n\n\nclass BookInstance(models.Model):\n    quality_types = (\n        ('b', 'bad'),\n        ('g', 'good'),\n        ('n', 'new')\n    )\n    code = models.CharField(max_length=10, unique=True)\n    book = models.ForeignKey('Book',\n                             related_name='instances',\n                             on_delete=models.RESTRICT)\n    room = models.ForeignKey('Room',\n                             related_name='book_instances',\n                             on_delete=models.RESTRICT)\n    quality = models.CharField(max_length=1, choices=quality_types)\n\n    def __str__(self):\n        return f'b:{self.book} r:{self.room} q:{self.quality}'\n\n\nclass Room(models.Model):\n    name = models.CharField(max_length=100)\n    capacity = models.IntegerField()\n\n    def __str__(self):\n        return str(self.name)\n\n\nclass Reader(models.Model):\n    education_types = (('b', 'beginner'),\n                       ('m', 'middle'),\n                       ('h', 'higher'),\n                       ('d', 'degree'))\n\n    reader_number= models.CharField(max_length=10)\n    registration_date=models.DateField()\n    active = models.BooleanField(default=True)\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    passport_number = models.CharField(max_length=10)\n    birth_date = models.DateField()\n    address = models.CharField(max_length=200)\n    mobile_number = models.CharField(max_length=12)\n    education = models.CharField(max_length=1, choices=education_types)\n    book_instances = models.ManyToManyField('BookInstance',\n                                            related_name='readers',\n                                            through='ReaderBookHistory')\n    rooms = models.ManyToManyField('Room',\n                                   related_name='readers',\n                                   through='ReaderRoomHistory')\n    def __str__(self):\n        return f'{self.first_name} {self.last_name}'\n\n\nclass ReaderBookHistory(models.Model):\n    book_instance = models.ForeignKey('BookInstance',\n                                      related_name='readers_history',\n                                      on_delete=models.CASCADE)\n    reader = models.ForeignKey('Reader',\n                               related_name='books_history',\n                               on_delete=models.RESTRICT)\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n\n\nclass ReaderRoomHistory(models.Model):\n    reader = models.ForeignKey('Reader',\n                               related_name='rooms_history',\n                               on_delete=models.RESTRICT)\n    room = models.ForeignKey('Room',\n                             related_name='readers_history',\n                             on_delete=models.RESTRICT)\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n</code></pre>"},{"location":"lab3/practice3_1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1","text":""},{"location":"lab3/practice3_1/#1","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 1","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. </p> <p>\u041a\u043e\u0434:</p> <pre><code>from project_first_app.models import  Car, UserOwner, CarOwn, OwnerLicence \n\n\nfrom django.contrib.auth import get_user_model\nuser_model = get_user_model()\n\n\nc1 = Car(id=1, serial_number='AA001A', model='toyota', color='black')\nc1.save()\nc2 = Car(id=2, serial_number='AA002A', model='toyota', color='white')\nc2.save()\nc3 = Car(id=3, serial_number='AA003A', model='toyota', color='orange')\nc3.save()\nc4 = Car(id=4, serial_number='AA004A', model='ford', color='black')\nc4.save()\nc5 = Car(id=5, serial_number='AA005A', model='ford', color='white')\nc5.save()\nc6 = Car(id=6, serial_number='AA006A', model='ford', color='orange')\n\nu1 = user_model(username='vasy001', first_name='Vasy', last_name='Pupkin', passport_number='00001000001')\nu1.save()\nu2 = user_model(username='vasy002', first_name='Ivan', last_name='Kotov', passport_number='00001000002')\nu2.save()\nu3 = user_model(username='vasy003', first_name='Vasy', last_name='Kozlov', passport_number='00001000003')\nu3.save()\nu4 = user_model(username='vasy004', first_name='Vasy', last_name='User', passport_number='00001000004')\nu4.save()\nu5 = user_model(username='vasy005', first_name='Jojo', last_name='Reference', passport_number='00001000005')\nu5.save()\nu6 = user_model(username='vasy006', first_name='Ivan', last_name='User', passport_number='00001000006')\nu6.save()\n\n\ncar_own_list = [[u1, c1, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'],\n                [u1, c2, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'],\n                [u2, c1, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'],\n                [u2, c2, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'],\n                [u3, c3, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'],\n                [u4, c3, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'],\n                [u4, c4, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'],\n                [u5, c4, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'],\n                [u5, c5, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'],\n                [u5, c6, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00']]\n\n\nfor owner, car, start_date, end_date in car_own_list:\n    print(car, owner)\n    CarOwn(owner=owner, car=car, start_date=start_date, end_date=end_date).save()\n\nfor i, user in enumerate([u1, u2, u3, u4, u5, u6]):\n    OwnerLicence(owner=user, Licence_number=f'000{i}', licence_type='default', issue_date='2022-11-01').save()\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <pre><code>Car.objects.all()\n&lt;QuerySet [&lt;Car: AA001A&gt;, &lt;Car: AA002A&gt;, &lt;Car: AA003A&gt;, &lt;Car: AA004A&gt;, &lt;Car: AA005A&gt;]&gt;\n\nUserOwner.objects.all()\n&lt;QuerySet [&lt;UserOwner: vasy001&gt;, &lt;UserOwner: vasy002&gt;, \n            &lt;UserOwner: vasy003&gt;, &lt;UserOwner: vasy004&gt;, \n            &lt;UserOwner: vasy005&gt;, &lt;UserOwner: vasy006&gt;]&gt;\n\n\nCarOwn.objects.all()\n&lt;QuerySet [&lt;CarOwn: vasy001 AA001A 2022-10-31 2022-11-03&gt;, \n&lt;CarOwn: vasy001 AA002A 2022-10-31 2022-11-03&gt;, \n&lt;CarOwn: vasy002 AA001A 2022-11-03 2022-11-09&gt;, \n&lt;CarOwn: vasy002 AA002A 2022-11-03 2022-11-09&gt;,\n&lt;CarOwn: vasy003 AA003A 2022-10-31 2022-11-03&gt;,\n&lt;CarOwn: vasy004 AA003A 2022-11-03 2022-11-09&gt;, \n&lt;CarOwn: vasy004 AA004A 2022-10-31 2022-11-03&gt;, \n&lt;CarOwn: vasy005 AA004A 2022-11-03 2022-11-09&gt;,\n&lt;CarOwn: vasy005 AA005A 2022-10-31 2022-11-03&gt;]&gt;\n</code></pre>"},{"location":"lab3/practice3_1/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c)</p> <pre><code>Car.objects.filter(model='ford')\n\n&lt;QuerySet [&lt;Car: AA004A&gt;, &lt;Car: AA005A&gt;]&gt;\n</code></pre> <p>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435)</p> <pre><code>UserOwner.objects.filter(first_name='Vasy')\n\n&lt;QuerySet [&lt;UserOwner: vasy001&gt;, &lt;UserOwner: vasy003&gt;, &lt;UserOwner: vasy004&gt;]&gt;\n</code></pre> <p>\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430)</p> <pre><code>from random import choice\nrand_user = choice(user_model.objects.all())\n_id = rand_user.id\nlicence = rand_user.owner_licence.get()\nlicence\n\n&lt;OwnerLicence: vasy003 0002&gt;\n</code></pre> <p>\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442)</p> <pre><code>UserOwner.objects.filter(owner_car__car__color='black')\nUserOwner.objects.filter(cars__color='black')\n\n&lt;QuerySet [&lt;UserOwner: vasy001&gt;, &lt;UserOwner: vasy002&gt;, &lt;UserOwner: vasy004&gt;, &lt;UserOwner: vasy005&gt;]&gt;\n</code></pre> <p>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435)</p> <pre><code>UserOwner.objects.filter(owner_car__start_date__year='2022').distinct()\n\n&lt;QuerySet [&lt;UserOwner: vasy001&gt;, &lt;UserOwner: vasy002&gt;, &lt;UserOwner: vasy003&gt;, &lt;UserOwner: vasy004&gt;, &lt;UserOwner: vasy005&gt;]&gt;\n</code></pre>"},{"location":"lab3/practice3_1/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f</p> <pre><code>OwnerLicence.objects.aggregate(max_issue_date = models.Max('issue_date'))\n{'max_issue_date': datetime.date(2022, 11, 1)}\n</code></pre> <p>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435</p> <pre><code>CarOwn.objects.aggregate(latest_start_date=models.Max('start_date'))\n{'latest_start_date': datetime.datetime(2022, 11, 3, 21, 0, tzinfo=datetime.timezone.utc)}\n</code></pre> <p>\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</p> <pre><code>count_by_user = UserOwner.objects.annotate(count=models.Count('owner_car'))\nfor user_count in count_by_user:\n    print(user_count.username, user_count.count)\n\nvsevolod026 0\nvasy001 2\nvasy002 2\nvasy003 1\nvasy004 2\nvasy005 2\nvasy006 0\n\n</code></pre> <p>\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438</p> <pre><code>count_by_model = Car.objects.values('model').annotate(count=models.Count('id'))\nfor model_counter in count_by_model:\n    print(model_counter['model'], model_counter['count'])\n\nford 2\ntoyota 3\n</code></pre> <p>\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f </p> <pre><code>OwnerLicence.objects.order_by('issue_date')\n&lt;QuerySet [&lt;OwnerLicence: vasy001 0000&gt;, &lt;OwnerLicence: vasy002 0001&gt;, &lt;OwnerLicence: vasy003 0002&gt;, &lt;OwnerLicence: vasy004 0003&gt;, &lt;OwnerLicence: vasy005 0004&gt;, &lt;OwnerLicence: vasy006 0005&gt;]&gt;\n</code></pre>"},{"location":"lab3/serializers/","title":"Serializers","text":"<pre><code>from lab3 import models\nfrom rest_framework import serializers\n\n\nclass AuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.Author\n        exclude = ['id']\n\nclass BookSerializer(serializers.ModelSerializer):\n    section = serializers.StringRelatedField(read_only=True)\n    publisher = serializers.StringRelatedField(read_only=True)\n    authors = AuthorSerializer(many=True)\n\n    class Meta:\n        model = models.Book\n        exclude = ['rooms', 'id']\n\n\nclass BookCreateSerializer(serializers.ModelSerializer):\n    authors = serializers.PrimaryKeyRelatedField(\n        many=True,\n        queryset=models.Author.objects.all()\n    )\n    class Meta:\n        model = models.Book\n        exclude = ['rooms', 'id']\n\n\nclass BookInstanceSerializer(serializers.ModelSerializer):\n    book = BookSerializer(many=False)\n\n    class Meta:\n        model = models.BookInstance\n        exclude = ['id']\n\n\nclass BookInstanceCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.BookInstance\n        exclude = ['id']\n\n\nclass ReaderSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.Reader\n        exclude = ['education', 'rooms', 'book_instances']\n\n\nclass StatisticsEducationSerializer(serializers.Serializer):\n    degree = serializers.FloatField()\n    higher = serializers.FloatField()\n    middle = serializers.FloatField()\n    beginner = serializers.FloatField()\n\n\nclass StatisticsAgeSerializer(serializers.Serializer):\n    under_20 = serializers.FloatField()\n    after_20 = serializers.FloatField()\n\n\nclass StatisticsSerializer(serializers.Serializer):\n    books_taken = serializers.IntegerField()\n    new_readers = serializers.IntegerField()\n</code></pre>"},{"location":"lab3/views/","title":"Views","text":"<pre><code>from rest_framework import generics, permissions, views, exceptions\nfrom rest_framework.response import Response\nfrom lab3 import serializers, models, filters\nfrom django.db import models as dj_models\nfrom scripts import create_db_data\nfrom datetime import datetime,timedelta\nfrom abc import abstractmethod\n\n\n\n\nclass ApiViewSingleObject(generics.GenericAPIView):\n    def get(self, request, *args, **kwargs):\n        _object = self.get_object_for_get()\n        serializer = self.get_serializer(_object, many=False)\n        return Response(serializer.data)\n\n    @abstractmethod\n    def get_object_for_get(self):\n        raise NotImplemented('You must implement get_object_for_get')\n\n\n\nclass InitDataView(views.APIView):\n    def get(self, request):\n        create_db_data.run()\n        return Response({'date': []}, status=200)\n\n\nclass ReaderBooksApiView(generics.ListAPIView):\n    serializer_class = serializers.BookInstanceSerializer\n\n    def get_queryset(self):\n        reader_pk = self.kwargs.get('reader_pk', None)\n        if reader_pk is None:\n            raise exceptions.ValidationError('Specify reader_pk in url')\n\n        reader_books_qs = models.ReaderBookHistory.objects.filter(reader_id=reader_pk,\n                                                end_date__isnull=True)\n        # todo values list \u0432\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435. \u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\n        instances_id = set(reader_books_qs.values_list('book_instance', flat=True))\n        instances = models.BookInstance.objects.filter(id__in=instances_id)\n        return instances\n\n\nclass OutdatedReadersApiView(generics.ListAPIView):\n    serializer_class = serializers.ReaderSerializer\n\n    def get_queryset(self):\n        year_ago = datetime.now() - timedelta(days=365)\n        outdated_qs = models.Reader.objects.filter(registration_date__lt=year_ago,\n                                                   active=True)\n        return outdated_qs\n\n\nclass ReaderRareBook(generics.ListAPIView):\n    serializer_class = serializers.ReaderSerializer\n\n    def get_queryset(self):\n        book_cnt = models.Book.objects.annotate(\n            instances_cnt=dj_models.Count('instances')\n        )\n        rare_books_qs = book_cnt.filter(instances_cnt__lte=2)\n        rare_books_id = set(rare_books_qs.values_list('id', flat=True))\n        rare_inst_qs = models.BookInstance.objects.filter(book_id__in=rare_books_id)\n        rare_reader_ids = set(rare_inst_qs.values_list('readers', flat=True))\n        rare_readers = models.Reader.objects.filter(id__in=rare_reader_ids)\n        return rare_readers\n\n\nclass ReaderBookMonthAgoApi(generics.ListAPIView):\n    serializer_class = serializers.ReaderSerializer\n\n    def get_queryset(self):\n        month_ago = datetime.now() - timedelta(days=30)\n\n        reader_history = models.ReaderBookHistory.objects.filter(\n            start_date__lt=month_ago,\n            end_date__isnull=True\n        )\n        reader_ids = set(reader_history.values_list('reader', flat=True))\n        readers = models.Reader.objects.filter(id__in=reader_ids)\n        return readers\n\n\nclass StatisticsEducationApiView(ApiViewSingleObject):\n    permission_classes = (permissions.IsAuthenticated,)\n    serializer_class = serializers.StatisticsEducationSerializer\n\n\n    def get_object_for_get(self):\n        qs = models.Reader.objects.all()\n        active_qs = qs.filter(active=True)\n        active_users = len(active_qs)\n        edu_stat_list = active_qs.values('education').annotate(cnt=dj_models.Count('id'))\n        edu_code_to_title = dict(models.Reader.education_types)\n        res = {}\n        for edu_stat in edu_stat_list:\n            edu_code = edu_stat['education']\n            cnt = edu_stat['cnt']\n            edu_title = edu_code_to_title[edu_code]\n            res[edu_title] = round(cnt / active_users, 3)\n        return res\n\n\n\nclass StatisticsAgeApiView(ApiViewSingleObject):\n    serializer_class = serializers.StatisticsAgeSerializer\n\n    def get_object_for_get(self):\n        qs = models.Reader.objects.all()\n        active_qs = qs.filter(active=True)\n        active_users = len(active_qs)\n        n = datetime.now()\n        birthdate_18 = datetime(year=n.year - 20, month=n.month, day=n.day)\n\n        age_stat = active_qs.aggregate(\n            under_20=dj_models.Count(\n                'id',\n                filter=dj_models.Q(birth_date__gt=birthdate_18)\n            ),\n            after_20=dj_models.Count(\n                'id',\n                filter=dj_models.Q(birth_date__lte=birthdate_18)\n            ))\n        for k, v in age_stat.items():\n            age_stat[k] = round(v / active_users, 3)\n        return age_stat\n\n\nclass StatisticsLibraryApiView(ApiViewSingleObject):\n    serializer_class = serializers.StatisticsSerializer\n\n    def get_object_for_get(self):\n        qs_reader = filters.ReaderRegistrationDateRangeFilter(self.request.GET).qs\n        new_readers = qs_reader.count()\n\n        qs_books = filters.BookTakenDateRangeFilter(self.request.GET).qs\n        books_taken = qs_books.count()\n        return {'new_readers': new_readers, 'books_taken': books_taken}\n\n\nclass StatisticsRoomApiView(ApiViewSingleObject):\n    serializer_class = serializers.StatisticsSerializer\n    queryset = models.Room.objects.all()\n\n    def get_object_for_get(self):\n        qs_book_taken = filters.BookTakenDateRangeFilter(\n            self.request.GET\n        ).qs\n        books_taken = qs_book_taken.count()\n        room = self.get_object()\n        qs_reader_history = room.readers_history\n        qs_reader_history = filters.RoomRegistrationDateRangeFilter(\n            self.request.GET,\n            queryset=qs_reader_history\n        ).qs\n        new_readers = qs_reader_history.count()\n        return {'books_taken': books_taken, 'new_readers': new_readers}\n\n\nclass ReaderCreateApiView(generics.CreateAPIView):\n    serializer_class = serializers.ReaderSerializer\n    queryset = models.Reader.objects.all()\n\n\nclass BookInstanceRemoveApiView(generics.RetrieveDestroyAPIView):\n    queryset = models.BookInstance.objects.all()\n    serializer_class = serializers.BookInstanceSerializer\n\n\nclass BookInstanceCreateView(generics.CreateAPIView):\n    serializer_class = serializers.BookInstanceCreateSerializer\n\n\nclass BookCreateView(generics.CreateAPIView):\n    serializer_class = serializers.BookCreateSerializer\n</code></pre>"},{"location":"lab4/interfaces/","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":""},{"location":"lab4/interfaces/#reader","title":"\u0420\u0430\u0437\u0434\u0435\u043b reader","text":"<p>\u0412\u0441\u0435, \u0447\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435</p>"},{"location":"lab4/interfaces/#readerbook_month_ago","title":"/reader/book_month_ago","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</p> <pre><code>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0437\u044f\u043b\u0438 \u043a\u043d\u0438\u0433\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0435\u0441\u044f\u0446\u0430 \u043d\u0430\u0437\u0430\u0434, \u0438 \u0438\u0445 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api</p> <pre><code>/lab3/reader/book_month_ago\n</code></pre>"},{"location":"lab4/interfaces/#readerrare_books","title":"/reader/rare_books","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435:</p> <pre><code>\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 2-\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api:</p> <pre><code>lab3/reader/rare_books\n</code></pre>"},{"location":"lab4/interfaces/#readeroutdated","title":"/reader/outdated","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: </p> <pre><code>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api:</p> <pre><code>lab3/reader/outdated\n</code></pre>"},{"location":"lab4/interfaces/#readercreate","title":"/reader/create","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: </p> <pre><code>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api:</p> <pre><code>lab3/reader/create\n</code></pre>"},{"location":"lab4/interfaces/#statistics","title":"Statistics","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438</p>"},{"location":"lab4/interfaces/#statistics_1","title":"/statistics","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</p> <pre><code>\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api:</p> <pre><code>lab3/statistics/age   \nlab3/statistics/education  \nlab3/statistics/library  \nlab3/statistics/room/listbra\n</code></pre>"},{"location":"lab4/interfaces/#book_instances","title":"book_instances","text":""},{"location":"lab4/interfaces/#book_instanceslist","title":"/book_instances/list","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</p> <pre><code>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api</p> <pre><code>lab3/book_instance/list\nlab3/book_instance/remove/{id}\n</code></pre>"},{"location":"lab4/interfaces/#book_instancesupdateid","title":"/book_instances/update/:id","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</p> <pre><code>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api</p> <pre><code>lab3/book_instance/update/{id}\nlab3/book_instance/{id}\n</code></pre>"},{"location":"lab4/interfaces/#user","title":"User","text":"<p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p>"},{"location":"lab4/interfaces/#userregistration","title":"/user/registration","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</p> <pre><code>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u043b\u044f\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api</p> <pre><code>/auth/users/\n</code></pre>"},{"location":"lab4/interfaces/#userlogin","title":"/user/login","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</p> <pre><code>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0433\u0438\u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api</p> <pre><code>/auth/token/login/\n</code></pre>"},{"location":"lab4/interfaces/#userupdate","title":"/user/update","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435</p> <pre><code>\u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b api</p> <pre><code>/auth/users/me\n</code></pre>"}]}